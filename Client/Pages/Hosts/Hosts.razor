@page "/hosts"
@inject NavigationManager Navigation
@inject IHostService HostSrvc
@inject IDialogService DialogService

<link href="https://use.fontawesome.com/releases/v5.14.0/css/all.css" rel="stylesheet">

<h2>List of host machines</h2>
<MudButton Style="margin: 10px 0;" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" OnClick="CreateHost">Add</MudButton>
<div>
    <MudTable Items="hosts" class="mat-elevation-z5" AllowSelection="true" SelectionChanged="SelectionChangedEvent" Hover="true" Dense="true"
              RowClassFunc="@SelectedRowClassFunc" OnRowClick="e => RowClickEvent(e)" @ref="mudTable" T="HostModel">
        <HeaderContent>
            <MudTh>ID</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>OS</MudTh>
            <MudTh>IP</MudTh>
            <MudTh>Port</MudTh>
            <MudTh>URI</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Id</MudTd>
            <MudTd>@context.DisplayName</MudTd>
            @if (context.IsWindows)
            {
                <MudTd>
                    <MudIcon Icon="@Icons.Custom.Brands.MicrosoftWindows" />
                </MudTd>
            }
            else
            {
                <MudTd>
                    <MudIcon Icon="fab fa-linux" />
                </MudTd>
            }
            <MudTd>@context.IP</MudTd>
            <MudTd>@context.Port</MudTd>
            <MudTd>@context.URI</MudTd>
            <MudTd Class="actions-cell">
                <MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Primary" OnClick="e => ViewHost(context)" />
                <MudIconButton Icon="@Icons.Filled.Edit" Color="Color.Info" OnClick="e => EditHost(context)" />
                <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="e => DeleteHost(context)" />
            </MudTd>
        </RowTemplate>
    </MudTable>
    @if (hosts == null)
    {
        <p><em>Loading...</em></p>
    }
</div>


@code {
    List<HostModel> hosts;
    private int selectedRowNumber = -1;
    private MudTable<HostModel> mudTable;


    protected override async Task OnInitializedAsync()
    {
        hosts = await HostSrvc.GetHosts();
    }

    public void SelectionChangedEvent(object row)
    {
        //Navigation.NavigateTo($"/images/details?id=" + (row as ImageModel).Id);
    }

    private void RowClickEvent(TableRowClickEventArgs<HostModel> tableRowClickEventArgs)
    {
        return;
    }

    private string SelectedRowClassFunc(HostModel host, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(host))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    async Task DeleteHost(HostModel host)
    {
        var parameters = new DialogParameters { ["host"] = host };

        var dialog = DialogService.Show<DeleteHostDialog>("Delete Host", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            //var Id = result.Data.ToString();
            hosts.Remove(host);
        }
    }

    private void CreateHost()
    {
        Navigation.NavigateTo($"/hosts/add");
    }

    private void EditHost(HostModel host)
    {
        Navigation.NavigateTo("/hosts/edit/" + host.Id);
    }

    private void ViewHost(HostModel host)
    {
        Navigation.NavigateTo($"/hosts/details?id=" + host.Id);
    }
}
