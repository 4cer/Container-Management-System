@page "/manage/hosts/add"
@using System.Net
@inject NavigationManager Navigation
@inject IHostService service
@attribute [Authorize(Roles = "Admin")]

<link href="https://use.fontawesome.com/releases/v5.14.0/css/all.css" rel="stylesheet">

<h2>Add host</h2>

<MudItem style="width: 410px">
    <MudTextField @bind-Value="NewHost.DisplayName" Label="Host display name" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
</MudItem>


<MudForm>
    <MudRadioGroup @bind-SelectedOption="@NewHost.IsWindows">
        <MudRadio Option="true" Color="Color.Primary">Windows</MudRadio>
        <MudRadio Option="false" Color="Color.Primary">Linux</MudRadio>
    </MudRadioGroup>
</MudForm>

<MudItem style="width: 410px">
    <MudTextField @bind-Value="NewHost.URI" Label="Host URI" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
</MudItem>

<br />

<MudItem>
    <MudFab Color="conn switch
    {
    -1 => Color.Error,
    0 => Color.Primary,
    _ => Color.Success
    } " Icon="fas fa-sync-alt" Label="Test connection" Class="py-4 px-6 rounded-lg" OnClick="Test" />
</MudItem>
<MudText Color="conn == -1 ? Color.Error : Color.Success" Text="conn == -1 ? 'Connection could not be established!' : 'Connection successful!'"></MudText>

<br />

<MudItem>
    <MudFab Disabled="conn!=1" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Label="Create" Class="py-4 px-6 rounded-lg" OnClick="CreateHost"/>
</MudItem>




@code {
    public HostModel NewHost { get; set; } = new();

    public string SelectedOption { get; set; }
    private int conn = 0;

    private void Reset()
    {
        SelectedOption = null;
    }


    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
        //TODO upload the files to the server
    }

    private async void CreateHost()
    {
        await service.AddHost(NewHost);
        Navigation.NavigateTo($"/manage/hosts");
    }

    private async Task Test()
    {
        conn = await service.TestConnection(WebUtility.UrlEncode(NewHost.URI)) ? 1 : -1;
    }

}
