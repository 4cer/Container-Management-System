@page "/testing/hosts"
@attribute [Authorize(Roles = "Admin")]

@inject IHostService hostService
@inject NavigationManager navMgr

<h3>AdminHostContainers</h3>

@if (hosts != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Id
                </th>
                <th>
                    DisplayName
                </th>
                <th>
                    IsWindows
                </th>
                <th>
                    IP
                </th>
                <th>
                    Port
                </th>
                <th>
                    URI
                </th>
                <th>
                    Actions
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var host in hosts)
            {
                <tr>
                    <td>
                        @host.Id
                    </td>
                    <td>
                        @host.DisplayName
                    </td>
                    <td>
                        @host.IsWindows
                    </td>
                    <td>
                        @host.IP
                    </td>
                    <td>
                        @host.Port
                    </td>
                    <td>
                        @host.URI
                    </td>
                    <td>
                        <input type="button" class="btn btn-danger" value="Delet" @onclick="(() => DeleteHost(host.Id))" />
                    </td>
                </tr>
            }
            @if (!hosts.Any())
            {
                <tr><th colspan="6">There are no hosts owned by this user...</th></tr>
            }
        </tbody>
    </table>
}

@if (model != null)
{
    <h3>Creating containers</h3>
    <EditForm Model="model" OnSubmit="OnCreat">
        <div class="form-group">
            <label for="host-name">Nazwa*</label>
            <InputText id="host-name" @bind-Value="model.DisplayName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="host-desc">Ip</label>
            <InputText id="host-desc" @bind-Value="model.IP" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="host-port">Port</label>
            <InputNumber id="host-port" @bind-Value="model.Port" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="host-uri">URI*</label>
            <InputText id="host-uri" @bind-Value="model.URI" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <InputCheckbox id="host-win" @bind-Value="model.IsWindows" class="form-check-input" />
            <label for="host-win">Windows system*</label>
        </div>
        <div class="form-check">
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
    </EditForm>
}

@code {
    List<HostModel> hosts;

    HostModel model;

    protected override async Task OnInitializedAsync()
    {
        this.model = new();

        hosts = await hostService.GetHosts();
    }

    protected async Task OnCreat()
    {
        _ = await hostService.AddHost(model);
        hosts = await hostService.GetHosts();
    }

    protected async Task DeleteHost(string id)
    {
        _ = await hostService.DeleteHost(id);
        hosts = await hostService.GetHosts();
    }

    protected async Task EditHost()
    {
        HostModel hostToUpdate = hosts.First();
        hostToUpdate.Port = 1337;
        _ = await hostService.EditHost(hostToUpdate);
        hosts = await hostService.GetHosts();
    }

}
