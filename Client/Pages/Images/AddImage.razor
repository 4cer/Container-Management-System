@page "/images/add"
@inject NavigationManager Navigation
@inject IImageService service
@inject ISnackbar Snackbar

<h2>Add Image</h2>
<EditForm Model="@newImage" OnValidSubmit="CreateImage">
    <DataAnnotationsValidator/>
    <MudItem style="width: 410px">
        <MudTextField @bind-Value="@newImage.DisplayName" For="@(() => newImage.DisplayName)" Label="Image name" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
    </MudItem>

    <MudItem style="width: 410px">
        <MudTextField @bind-Value="@newImage.DockerImageName" For="@(() => newImage.DockerImageName)" Label="Dockerhub Image ID" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
    </MudItem>

    <MudItem style="width: 410px">
        <MudTextField @bind-Value="@newImage.Description" For="@(() => newImage.Description)" Label="Image description" Variant="Variant.Text" Margin="Margin.Dense" Lines="3"></MudTextField>
    </MudItem>

    <br />

    <MudItem>
        <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Label="Create" Class="py-4 px-6 rounded-lg" ButtonType="ButtonType.Submit" />
    </MudItem>
</EditForm>

@code {
    public ImageModel newImage { get; set; } = new();

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
        //TODO upload the files to the server
    }


    private async void CreateImage()
    {
        var ret = await service.GetImageFromDockerHub(newImage);
        Navigation.NavigateTo("/images");
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        if (ret.IsSuccessStatusCode)
        {
            Snackbar.Add("Image has been added sucessfully", Severity.Success);
        }
    }

}
