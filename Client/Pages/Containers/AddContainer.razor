@page "/containers/add"
@inject NavigationManager Navigation
@inject IContainerService service
@inject IImageService imageService


<h2>Create container</h2>
@if (IsLoading)
{
    <MudText>Pulling your docker image to the remote host</MudText>
    <MudProgressCircular Indeterminate="true" Size="Size.Large"></MudProgressCircular>
}
else
{
    <EditForm Model="@newContainer" OnValidSubmit="CreateContainer" @ref="form">
        <DataAnnotationsValidator />
        <MudItem style="width: 410px">
            <MudTextField @bind-Value="@newContainer.Name" For="@(() => newContainer.Name)" Label="Container name" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
        </MudItem>
        <MudItem style="width: 410px">
            <MudTextField @bind-Value="@newContainer.Description" For="@(() => newContainer.Description)" Lines="3" Label="Description" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
        </MudItem>
        @*<MudTabs>
            <MudTabPanel Text="Podstawowe">*@
        <MudItem style="width: 410px">
            <MudSelect Label="Source image" @bind-Value="newContainer.DockerImageName" AnchorOrigin="Origin.BottomCenter">
                @if (MyImages != null)
                    {
                    @foreach (var image in MyImages)
                        {
                        <MudSelectItem T="string" Value="@image.Id">@image.DisplayName  <span style="color: #888; font-style: italic;">[@image.DockerImageName]</span></MudSelectItem>
                        }
                    }
            </MudSelect>
        </MudItem>

        <br />
        <MudText>Add your container's private ports, and we will give you some public (external)</MudText><br />
        <MudForm>
            <MudGrid style="width: 550px">
                @for (var i = 0; i < newContainer.PortBindings.Count; i++)
                {
                    var index = i;
                    var port = newContainer.PortBindings[i];

                    @*<MudItem>
                            <MudNumericField @bind-Value="@port.PublicPort" T="ushort" Label="Container port" Variant="Variant.Text" Margin="Margin.Dense" Min="30000" Max="31000"></MudNumericField>
                        </MudItem>*@
                    <MudItem>
                        <MudNumericField @bind-Value="@port.PrivatePort" For="@(() => port.PrivatePort)" T="ushort" Label="Target port" Variant="Variant.Text" Margin="Margin.Dense" Min="1" Max="65535" ></MudNumericField>
                    </MudItem>
                    <MudItem>
                        <MudFab Icon="@Icons.Filled.Remove" Size="Size.Small" Color="Color.Error" OnClick="() => newContainer.PortBindings.RemoveAt(index)"></MudFab>
                    </MudItem>
                    <br />
                }
            </MudGrid>
        </MudForm>
        <br />
        <MudFab Label="Add ports" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="() => newContainer.PortBindings.Add(new ContainerPortModel(){PrivatePort = 1, PublicPort = 0})"></MudFab>
        <br />
        <br />
        <MudForm>
            <MudRadioGroup @bind-SelectedOption="@newContainer.IsWindows">
                <MudRadio Option="true" Color="Color.Primary">Windows</MudRadio>
                <MudRadio Option="false" Color="Color.Primary">Linux</MudRadio>
            </MudRadioGroup>
        </MudForm>
        @*</MudTabPanel>
                <MudTabPanel Text="Zaawansowane">
                    <MudItem style="width: 410px">
                        <MudTextField @bind-Value="Flags" Label="Flagi uruchomienia" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                    </MudItem>
                    <br />
                    <p>Dockerfile</p>
                    <br />
                    <p>Kontekst</p>
                    <br />

                    <MudGrid>
                        <InputFile id="fileInput" OnChange="UploadFiles" hidden />

                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Filled.CloudUpload"
                                   for="fileInput">
                            Upload Files
                        </MudButton>

                        @if (files != null)
                        {
                            <MudList Style="padding:0px 20px">
                                @foreach (var file in files)
                                {
                                    <MudListItem @key="@file" Style="padding:0px 20px">
                                        @file.Name
                                    </MudListItem>
                                }
                            </MudList>
                        }

                    </MudGrid>
                </MudTabPanel>
            </MudTabs>*@
        <br />

        <MudItem>
            <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Label="Create" Class="py-4 px-6 rounded-lg" ButtonType="ButtonType.Submit"/>
        </MudItem>
    </EditForm>


}

@code {
    /*
     * public string NameValue { get; set; }
    public string ImageName { get; set; }
    public string ContainerPort { get; set; }
    public string TargerPort { get; set; }
    public string Flags { get; set; }
     */
    public ContainerModel newContainer { get; set; } = new();
    public List<ImageModel> MyImages { get; set; }
    public bool IsLoading = false;
    public EditForm form { get; set; }

    //public List<ContainerPortModel> portsList { get; set; } = new();

    //public string SelectedOption { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MyImages = await imageService.GetImageList();
    }

    private void Reset()
    {
        //SelectedOption = null;
    }


    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
        //TODO upload the files to the server
    }

    public async Task CreateContainer()
    {
        newContainer.PortBindings = newContainer.PortBindings.Distinct().ToList();
        IsLoading = true;
        var ret = await service.CreateContainer(newContainer);
        IsLoading = false;
        Navigation.NavigateTo("/containers");
    }

}
