@page "/containers/add"
@inject NavigationManager Navigation
@inject IContainerService service
@inject IImageService imageService


<MudText Typo="Typo.h2">Create container</MudText>

<MudItem style="width: 410px">
    <MudTextField @bind-Value="@newContainer.Name" Label="Container name" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
</MudItem>
@*<MudTabs>
    <MudTabPanel Text="Podstawowe">*@
<MudItem style="width: 410px">
    <MudSelect Label="Source image" @bind-Value="newContainer.DockerImageName" AnchorOrigin="Origin.BottomCenter">
        @if (MyImages != null)
        {
            @foreach (var image in MyImages)
            {
                <MudSelectItem T="string" Value="@image.Id">@image.DisplayName  <span style="color: #888; font-style: italic;">[@image.DockerImageName]</span></MudSelectItem>
            }
        }
    </MudSelect>
</MudItem>

<br />

<MudGrid style="width: 550px">
    @for (var i = 0; i < portsList.Count; i++)
    {
        var index = i;
        var port = portsList[i];

        <MudItem>
            <MudTextField @bind-Value="@port.ContainerPort" Label="Container port" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
        </MudItem>
        <MudItem>
            <MudTextField @bind-Value="@port.TargertPort" Label="Target port" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
        </MudItem>
        <MudItem>
            <MudFab Icon="@Icons.Filled.Remove" Size="Size.Small" Color="Color.Error" OnClick="() => portsList.RemoveAt(index)"></MudFab>
        </MudItem>
            <br />
            }
    </MudGrid>

<br />
<MudFab Label="Add ports" Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="() => portsList.Add(new Ports())"></MudFab>
<br />
<br />
<MudForm>
    <MudRadioGroup @bind-SelectedOption="@newContainer.IsWindows">
        <MudRadio Option="true" Color="Color.Primary">Windows</MudRadio>
        <MudRadio Option="false" Color="Color.Primary">Linux</MudRadio>
    </MudRadioGroup>
</MudForm>
@*</MudTabPanel>
        <MudTabPanel Text="Zaawansowane">
            <MudItem style="width: 410px">
                <MudTextField @bind-Value="Flags" Label="Flagi uruchomienia" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <br />
            <p>Dockerfile</p>
            <br />
            <p>Kontekst</p>
            <br />

            <MudGrid>
                <InputFile id="fileInput" OnChange="UploadFiles" hidden />

                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Filled.CloudUpload"
                           for="fileInput">
                    Upload Files
                </MudButton>

                @if (files != null)
                {
                    <MudList Style="padding:0px 20px">
                        @foreach (var file in files)
                        {
                            <MudListItem @key="@file" Style="padding:0px 20px">
                                @file.Name
                            </MudListItem>
                        }
                    </MudList>
                }

            </MudGrid>
        </MudTabPanel>
    </MudTabs>*@
<br />

<MudItem>
    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Label="Create" Class="py-4 px-6 rounded-lg" OnClick="CreateContainer" />
</MudItem>




@code {
    /*
     * public string NameValue { get; set; }
    public string ImageName { get; set; }
    public string ContainerPort { get; set; }
    public string TargerPort { get; set; }
    public string Flags { get; set; }
     */
    public ContainerModel newContainer { get; set; } = new();
    public List<ImageModel> MyImages { get; set; }

    public List<Ports> portsList { get; set; } = new List<Ports>();

    //public string SelectedOption { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MyImages = await imageService.GetImageList();
    }

    private void Reset()
    {
        //SelectedOption = null;
    }


    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
        //TODO upload the files to the server
    }

    public async Task CreateContainer()
    {
        Console.WriteLine(newContainer.Name);
        var ret = await service.CreateContainer(newContainer);
        Navigation.NavigateTo("/containers");
    }

    public class Ports
    {
        public string ContainerPort { get; set; }
        public string TargertPort { get; set; }
    }

}
