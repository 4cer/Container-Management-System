@page "/containers/details/{ContainerId}"

@using Microsoft.AspNetCore.WebUtilities
@using ProITM.Shared
@inject NavigationManager Navigation
@inject IContainerService Srvc

<h3>Container details</h3>

<div>
    @if (Container != null)
    {
        <MudTable Items="new List<ContainerModel>(){Container}" T="ContainerModel" Breakpoint="Breakpoint.Xl" style="width: 50%;" Bordered="true">
            <HeaderContent>
                <MudTh>ID</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Source image</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>OS</MudTh>
                <MudTh>State</MudTh>
                <MudTh>Running</MudTh>
                <MudTh>Ports</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ID">@context.Id</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Source image">@context.DockerImageName</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="OS"> <div><MudIcon Icon="@(context.IsWindows ? Icons.Custom.Brands.MicrosoftWindows : "fab fa-linux")" /> @(context.IsWindows ? "Windows" : "Linux")</div></MudTd>
                <MudTd DataLabel="Status">@context.State</MudTd>
                <MudTd DataLabel="Running"><MudIcon Icon="@Icons.Filled.Circle" Color="@(context.IsRunning ? Color.Success : Color.Error)"></MudIcon></MudTd>
                <MudTd DataLabel="Ports">
                    <div>
                        @foreach (var p in context.PortBindUris)
                        {
                            <span>port @p.Key: <a href="@p.Value">@p.Value</a> </span><br />
                        }
                    </div>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</div>

@if (logs != null)
{
    <br />
    <h3>Container logs:</h3>
    <div style="background-color:#000000; font-family:Consolas; color:#ffffff; padding:10px;">
        @if (!IsStderr)
        {
            @((MarkupString)logs.Item1)
        }
        else
        {
            @((MarkupString)logs.Item2)
        }
    </div>

    <hr />
}
else
{
    <p>Loading...</p>
}

@code {
    public ContainerModel Container { get; set; }
    [Parameter]
    public string ContainerId { get; set; }
    Tuple<string, string> logs;
    bool IsStderr = false;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            logs = await Srvc.GetContainerLogs(ContainerId, "0", "0");
            StateHasChanged();
            Container = await Srvc.ContainerDetails(ContainerId);
        }
        catch (Exception)
        {
            logs = new Tuple<string, string>("CONTAINER NOT FOUND", "CONTAINER NOT FOUND");
        }
    }

    protected override async void OnInitialized()
    {

    }

    protected async Task ToggleStream()
    {
        IsStderr = !IsStderr;
    }
}
