@page "/manage/groups"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ProITM.Client.Services
@using ProITM.Shared
@inject IGroupService GroupService
@inject NavigationManager navMgr
@attribute [Authorize]

<h3>ManageGroups</h3>

<AuthorizeView Roles="admin">
    <Authorized>
        <p>Yer an admin, Harry</p>
    </Authorized>
    <NotAuthorized>
        <p>NOT AN ADMIN</p>
    </NotAuthorized>
</AuthorizeView>

<a class="btn btn-primary mb-3" style="width:auto" href="manage/groups/create"
   asp-controller="administration">Add new role</a>

@if (statusCode != null)
{
    <div class="alert alert-danger">
        <h4>@statusCode.ReasonPhrase</h4>
        <p>
            @statusCode.RequestMessage.RequestUri;
        </p>
    </div>
}

@if (groups == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (!groups.Any())
    {
        <p>No groups added yet.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>
                        Name
                    </th>
                    <th>
                        Id
                    </th>
                    <th>
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var group in groups)
                {
                    <tr onclick="">
                        <td>
                            @group.Name;
                        </td>
                        <td>
                            @group.Id;
                        </td>
                        <td>
                            <button class="btn btn-secondary" @onclick="(() => EditGroup(group.Id))">Edit</button>
                            <button class="btn btn-danger" @onclick="(() => DeleteGroup(group.Id))">Delet</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    }
}

@code {
    private List<Group> groups;

    private HttpResponseMessage statusCode;

    protected override async Task OnInitializedAsync()
    {
        groups = await GroupService.GetGroups();
    }

    protected void EditGroup(string id)
    {
        navMgr.NavigateTo($"manage/groups/edit/{id}");
    }

    protected async void DeleteGroup(string id)
    {
        var result = await GroupService.DeleteGroup(id);
        if(result.IsSuccessStatusCode)
        {
            navMgr.NavigateTo($"manage/groups", true);
        }
        statusCode = result;

    }

}
