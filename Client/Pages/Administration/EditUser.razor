@page "/manage/users/edit/{Id}"
@attribute [Authorize(Roles = "Admin")]
@using System.Text.RegularExpressions

@inject IAdministrationService administrationService
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar

<h2>Edit User</h2>

@if (message != null)
{
    <div class="alert alert-danger overflow-auto">
        <h4>@message.ReasonPhrase</h4>
        <p>
            @message.RequestMessage;
        </p>
    </div>
}

@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div style="width: 400px">

        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField Required="true" Label="Username" RequiredError="User name is required!" @bind-Value="@user.UserName" />
            <MudTextField Required="true" Label="Email" RequiredError="Email is required!" @bind-Value="@user.Email" />
            <p>* Required</p>
            <MudCheckBox Color="Color.Primary" Class="ml-n2" Label="Activate account" @bind-Checked="@user.EmailConfirmed" />
            <br />
        </MudForm>

        <MudFab Disabled="@(!success)" Color="Color.Primary" Icon="@Icons.Material.Filled.Save" OnClick="OnSubmit" Label="Save" Link="/manage/users"></MudFab>


    </div>
}


@code {
    [Parameter]
    public string Id { get; set; }
    UserModel user;

    HttpResponseMessage message;

    protected override async Task OnInitializedAsync()
    {
        user = await administrationService.GetUser(Id);
    }

    protected async void OnSubmit()
    {
        var result = await administrationService.EditUser(user);
        if (result.IsSuccessStatusCode)
        {
            navigationManager.NavigateTo($"manage/users", forceLoad: true);
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
            Snackbar.Add("User has been edited successfully", Severity.Success);
        }
        message = result;
    }

    bool success = true;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
}
