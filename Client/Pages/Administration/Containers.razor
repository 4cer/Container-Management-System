@page "/manage/containers"
@using System.ComponentModel
@inject NavigationManager Navigation
@inject IAdminContainerService ContSrvc
@inject IAdministrationService adminService
@inject IDialogService DialogService
@inject AuthenticationStateProvider provider
@inject ISnackbar Snackbar

<h2>Manage containers</h2>
<div>
    <MudTable Items="containers" class="mat-elevation-z5" AllowSelection="true" SelectionChanged="SelectionChangedEvent" Hover="true" Dense="true" Filter="new Func<ContainerModel,bool>(FilterFunc1)"
              RowClassFunc="@SelectedRowClassFunc" OnRowClick="e => RowClickEvent(e)" @ref="mudTable" T="ContainerModel">
        <ToolBarContent>

            <MudSelect T="string" @bind-Value="FilterUser">
                <MudSelectItem T="string" Value="string.Empty">All users</MudSelectItem>
                @foreach (var user in users)
                {
                    <MudSelectItem T="string" Value="user.UserName">@user.UserName</MudSelectItem>
                }
            </MudSelect>
            <MudSpacer /><MudSpacer />
            @*<MudTextField @bind-Value="FilterUser" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>*@
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Owner</MudTh>
            <MudTh>Source image</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>State</MudTh>
            <MudTh>Running</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.OwnerName</MudTd>
            <MudTd>@context.Image.DisplayName <span style="color: gray; font-style: italic">[@context.Image.DockerImageName]</span></MudTd>
            <MudTd>@context.Description</MudTd>
            <MudTd>@context.State</MudTd>
            @*<MudTd>@context.Machine.DisplayName</MudTd>*@
            @if (context.IsRunning)
            {
                <MudTd><MudIcon Icon="@Icons.Filled.Circle" Color="Color.Success"></MudIcon></MudTd>
            }
            else
            {
                <MudTd><MudIcon Icon="@Icons.Filled.Circle" Color="Color.Error"></MudIcon></MudTd>
            }

        <MudTd Class="actions-cell">
            @if (loadingContainers != null && loadingContainers.Contains(context))
            {
                <MudProgressCircular Indeterminate="true" Size="Size.Small"></MudProgressCircular>
            }
            else
            {
                @if (context.IsRunning)
                {

                    <MudIconButton Icon="@Icons.Filled.StopCircle" Color="Color.Primary" OnClick="e => StopContainer(context)" />
                }
                else
                {
                    <MudIconButton Icon="@Icons.Filled.PlayCircle" Color="Color.Primary" OnClick="e => StartContainer(context)" />
                }
            }
            <MudIconButton Icon="@Icons.Filled.Visibility" Color="Color.Primary" OnClick="e => ViewContainer(context)" />
            <MudIconButton Icon="@Icons.Filled.Delete" Color="Color.Error" OnClick="e => DeleteContainer(context)" />
        </MudTd>
        </RowTemplate>
    </MudTable>
    @if (containers == null)
    {
        <p><em>Loading...</em></p>
    }
</div>

@code {
    List<ContainerModel> containers;
    List<ContainerModel> loadingContainers = new();
    private int selectedRowNumber = -1;
    private MudTable<ContainerModel> mudTable;
    private string FilterUser = String.Empty;
    private List<UserModel> users = new();

    protected override async Task OnInitializedAsync()
    {
        containers = await ContSrvc.GetContainers(100);
        users = await adminService.GetUsers();
    }

    public void SelectionChangedEvent(object row)
    {
        //Navigation.NavigateTo($"/images/details?id=" + (row as ImageModel).Id);
    }

    private void RowClickEvent(TableRowClickEventArgs<ContainerModel> tableRowClickEventArgs)
    {
        //Navigation.NavigateTo($"containers/details?id={tableRowClickEventArgs.Item.Id}");
        return;
    }

    private string SelectedRowClassFunc(ContainerModel container, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(container))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    public void ViewContainer(ContainerModel container)
    {
        Navigation.NavigateTo($"/containers/details/" + container.Id);
    }

    async Task DeleteContainer(ContainerModel container)
    {
        var parameters = new DialogParameters { ["container"] = container };

        var dialog = DialogService.Show<DeleteContainerDialog>("Delete Container", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            var deletedServer = result.Data.ToString();
            var response = await ContSrvc.DeleteUsersContainer(container.Id);
            if (response.IsSuccessStatusCode)
            {
                containers.RemoveAll(item => item.Id.Equals(deletedServer));
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Add("Container has been deleted successfully", Severity.Success);
            }
        }
    }

    private bool FilterFunc1(ContainerModel element) => FilterFunc(element, FilterUser);
    private bool FilterFunc(ContainerModel container, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        return container.OwnerName == searchString;
    }

    private async Task StopContainer(ContainerModel container)
    {
        loadingContainers.Add(container);
        await ContSrvc.StopUsersContainer(container.Id);
        bool refr = await ContSrvc.RefreshUserContainers();
        if (refr)
        {
            containers = await ContSrvc.GetContainers(100);
            loadingContainers.Remove(container);
            StateHasChanged();
        }
    }

    private async Task StartContainer(ContainerModel container)
    {
        loadingContainers.Add(container);
        await ContSrvc.StartUsersContainer(container.Id);
        bool refr = await ContSrvc.RefreshUserContainers();
        if (refr)
        {
            containers = await ContSrvc.GetContainers(100);
            loadingContainers.Remove(container);
            StateHasChanged();
        }
    }
}