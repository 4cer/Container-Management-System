@page "/testing"
@attribute [Authorize(Roles = "Admin")]

@inject IContainerService cs
@inject NavigationManager navigationManager

<h3>Testing</h3>

@if (containers != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Id
                </th>
                <th>
                    Name
                </th>
                <th>
                    Description
                </th>
                <th>
                    Runs?
                </th>
                <th>
                    Delet?
                </th>
            </tr>
        </thead>
    </table>
    <tbody>
        @foreach (var con in containers)
        {
            <tr>
                <td>
                    @con.Id
                </td>
                <td>
                    @con.Name
                </td>
                <td>
                    @con.Description
                </td>
                <td>
                    @if (con.IsRunning)
                    {
                        <input class="btn btn-danger" type="button" @onclick="(() => Stop(con.Id))" value="Stop" />
                    }
                    else
                    {
                        <input class="btn btn-success" type="button" @onclick="(() => Start(con.Id))" value="Start" />
                    }
                </td>
                <td>
                    <input class="btn btn-danger" type="button" @onclick="(() => Delet(con.Id))" value="Delet" />
                    
                </td>
            </tr>
        }
    </tbody>

}

<input class="btn btn-primary" type="button" @onclick="(() => Creat())" value="Creat" />

@code {
    List<ContainerModel> containers;

    protected override async Task OnInitializedAsync()
    {
        containers = await cs.ListContainers(50);
    }

    protected async Task Delet(string id)
    {
        _ = await cs.DeleteContainer(id);
    }

    protected async Task Creat()
    {
        ContainerModel model = new();
        _ = await cs.CreateContainer(model);
    }

    protected async Task Start(string id)
    {
        _ = await cs.StartContainer(id);
    }

    protected async Task Stop(string id)
    {
        _ = await cs.StopContainer(id);
    }
}
