@page "/manage/groups/edit/{Id}"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using ProITM.Shared
@using ProITM.Client.Services
@inject IGroupService GroupService
@inject NavigationManager navMgr

<h3>Edit Group</h3>

@if (statusCode != null)
{
    <div class="alert alert-danger">
        <h4>
            @statusCode
        </h4>
    </div>
}

<EditForm Model="group" OnSubmit="HandleSubmit">
    <div class="form-group">
        <label for="GroupId"></label>
        <InputText id="GroupId" @bind-Value="group.Id" class="form-control" disabled="true"></InputText>
    </div>
    <div class="form-group">
        <label for="GroupName"></label>
        <InputText id="GroupName" @bind-Value="group.Name" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Submit</button>
        <a @onclick="(() => EditUsersInGroup(group.Id))" class="btn btn-primary">Edit Users In Group</a>
        <a href="manage/groups" class="btn btn-secondary">Cancel</a>
    </div>
</EditForm>


@code {
    [Parameter]
    public string Id { get; set; }

    public Group group = new Group();

    public string statusCode;

    protected override async Task OnInitializedAsync()
    {
        group = await GroupService.GetGroup(Id);
    }

    protected void EditUsersInGroup(string id)
    {
        navMgr.NavigateTo($"manage/groups/usersinrole/{id}");
    }

    protected async void HandleSubmit()
    {
        var result = await GroupService.EditGroup(group);
        if (result.IsSuccessStatusCode)
        {
            navMgr.NavigateTo("manage/groups", forceLoad: true);
        }
        else
        {
            //statusCode = result.Content.ToString();
            statusCode = result.ReasonPhrase.ToString();
        }
    }
}
